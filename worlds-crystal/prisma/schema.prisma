generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Champion {
  id             Int              @id @default(autoincrement())
  key            String           @unique
  riotId         Int?
  name           String
  GameChampStats GameChampStats[]

  // back-relations for UserPick
  userPicksMostPicked UserPick[] @relation("MostPicked")
  userPicksHighestWR  UserPick[] @relation("HighestWR")
}

model Player {
  id             Int              @id @default(autoincrement())
  handle         String           @unique
  team           String?
  GameChampStats GameChampStats[]

  // back-relation for UserPick
  userPicksHighestKDA UserPick[] @relation("HighestKDA")
}

model Game {
  id         BigInt   @id @default(autoincrement())
  tournament String
  stage      String
  dateUtc    DateTime
  patch      String?
  blueTeam   String
  redTeam    String
  winnerTeam String

  // add this:
  oracleGameId String? @unique

  GameChampStats GameChampStats[]
}

model GameChampStats {
  id         BigInt  @id @default(autoincrement())
  gameId     BigInt
  side       Side
  playerId   Int?
  championId Int
  kills      Int     @default(0)
  deaths     Int     @default(0)
  assists    Int     @default(0)
  win        Boolean

  game     Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player   Player?  @relation(fields: [playerId], references: [id])
  champion Champion @relation(fields: [championId], references: [id])

  @@unique([gameId, playerId], name: "game_player_unique")
}

enum Side {
  BLUE
  RED
}

model UserPick {
  id     BigInt @id @default(autoincrement())
  userId String
  season Int

  mostPickedChampionId Int?
  highestWrChampionId  Int?
  highestKdaPlayerId   Int?
  teemoPicked          Boolean?

  mostPickedChampion Champion? @relation("MostPicked", fields: [mostPickedChampionId], references: [id])
  highestWrChampion  Champion? @relation("HighestWR", fields: [highestWrChampionId], references: [id])
  highestKdaPlayer   Player?   @relation("HighestKDA", fields: [highestKdaPlayerId], references: [id])
  User               User      @relation(fields: [userId], references: [id])

  @@unique([userId, season])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // optional: link to your picks by userId
  picks UserPick[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
